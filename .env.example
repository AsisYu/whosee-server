# ===================================
# Whosee.me API 环境变量配置示例
# ===================================
# 使用说明：
# 1. 复制此文件为 .env 文件
# 2. 根据您的实际环境修改相应配置
# 3. 生产环境请务必修改所有安全相关配置

# ===================================
# 基础服务配置
# ===================================
# PORT: 应用服务器监听的端口号
# 类型: 整数
# 建议: 使用非标准端口(如3900)以避免与其他服务冲突
PORT=3900

# GIN_MODE: Gin框架的运行模式
# 类型: 字符串
# 可选值: debug(调试模式,提供详细日志)或release(生产模式,优化性能)
# 建议: 开发环境使用debug,生产环境使用release
GIN_MODE=debug

# APP_VERSION: 应用程序版本号
# 类型: 字符串(语义化版本号)
# 格式: 主版本.次版本.修订号(如1.0.0)
APP_VERSION=1.1.5

# HEALTH_CHECK_INTERVAL_DAYS: 自动健康检查的间隔天数
# 类型: 整数
# 建议: 1-7天之间，默认为3天
HEALTH_CHECK_INTERVAL_DAYS=3

# HEALTH_LOG_SEPARATE: 是否将健康检查日志分离到独立文件
# 类型: 布尔值 (true/false)
# 用途: 启用后健康检查日志将写入独立的health_YYYY-MM-DD.log文件
# 建议: 生产环境建议启用以便于日志管理和分析
HEALTH_LOG_SEPARATE=false

# HEALTH_LOG_SILENT: 是否在主日志中静默健康检查信息
# 类型: 布尔值 (true/false)
# 用途: 启用后主服务器日志将不显示健康检查相关信息
# 注意: 仅在HEALTH_LOG_SEPARATE=true时生效
# 建议: 与HEALTH_LOG_SEPARATE一起启用可保持主日志简洁
HEALTH_LOG_SILENT=false

# ===================================
# API 安全配置
# ===================================
# API_KEY: API访问密钥
# 类型: 字符串
# 用途: 用于验证API调用请求
# 安全要求: 必须保密，泄露会允许未授权访问API
# 生成方法: 建议使用随机生成的强密钥
# 生产环境: 请使用 openssl rand -base64 32 生成强密钥
API_KEY=development-api-key-example

# API_DEV_MODE: 开发模式标志
# 类型: 布尔值 (true/false)
# 用途: 在开发环境中禁用某些安全限制
# 安全要求: 生产环境必须设置为false
API_DEV_MODE=false

# TRUSTED_IPS: 可信IP白名单
# 类型: 逗号分隔的字符串
# 用途: 指定哪些IP地址可以绕过API密钥验证
# 示例: 127.0.0.1,192.168.1.100,10.0.0.0/8
# 注意: 可以使用CIDR表示法指定IP范围
TRUSTED_IPS=127.0.0.1,::1

# DISABLE_API_SECURITY: 是否禁用API安全限制
# 类型: 布尔值 (true/false)
# 用途: 完全禁用API安全限制，仅供特殊调试使用
# 安全要求: 生产环境必须设置为false
DISABLE_API_SECURITY=false

# IP_WHITELIST_STRICT_MODE: IP白名单严格模式
# 类型: 布尔值 (true/false)
# 用途: 控制IP白名单和API密钥验证的组合方式
# true: 要求IP在白名单且API密钥有效(适用于内部网络)
# false: 要求IP在白名单或API密钥有效(适用于生产环境，允许全球用户通过API密钥访问)
# 建议: 生产环境设置为false以支持全球用户访问
IP_WHITELIST_STRICT_MODE=false

# API_DEV_MODE: API开发模式
# 类型: 布尔值 (true/false)
# 用途: 开发模式下绕过IP白名单检查，仅验证API密钥
# true: 开发模式，允许任何IP通过有效API密钥访问
# false: 生产模式，严格按照IP白名单和严格模式配置验证
# 安全要求: 生产环境必须设置为false
API_DEV_MODE=true

# TRUSTED_IPS: 受信任的IP地址列表
# 类型: 字符串 (逗号分隔的IP地址或CIDR)
# 用途: 自定义受信任的IP地址，补充默认的内网IP白名单
# 格式: 支持单个IP(192.168.1.100)或CIDR网段(192.168.1.0/24)
# 示例: 192.168.1.100,10.0.0.0/8,172.16.0.0/12
# 留空表示仅使用默认的内网IP白名单
TRUSTED_IPS=

# IP_WHITELIST_CACHE_EXPIRATION: IP白名单缓存过期时间(秒)
# 类型: 整数
# 用途: 指定IP白名单验证结果的缓存时间
# 默认值: 300 (5分钟)
IP_WHITELIST_CACHE_EXPIRATION=300

# JWT_SECRET: JWT令牌加密密钥
# 类型: 字符串
# 用途: 用于生成和验证JWT令牌,保护API访问安全
# 建议: 使用至少32字符的随机字符串
# 安全要求: 必须保密,泄露会导致身份验证被破解
# 生成方法: 可使用 openssl rand -base64 32 命令生成
# 生产环境: 请务必重新生成强密钥
JWT_SECRET=development-jwt-secret-example

# ===================================
# 速率限制配置
# ===================================
# RATE_LIMIT_API: API请求频率限制(每分钟请求数)
# 类型: 整数
# 用途: 限制每个IP对API的请求频率
# 默认值: 60
RATE_LIMIT_API=60

# RATE_LIMIT_BURST: 突发请求允许数量
# 类型: 整数
# 用途: 允许短时间内的突发请求数量
# 默认值: 10
RATE_LIMIT_BURST=10

# ===================================
# 数据存储配置
# ===================================
# REDIS_ADDR: Redis服务器地址和端口
# 类型: 字符串
# 格式: host:port
# 示例: localhost:6379, redis-server:6379
REDIS_ADDR=localhost:6379

# REDIS_PASSWORD: Redis服务器访问密码
# 类型: 字符串
# 安全要求: 生产环境应设置强密码
# 注意: 如不需要密码可留空
REDIS_PASSWORD=

# REDIS_DB: Redis数据库索引
# 类型: 整数
# 范围: 0-15
# 建议: 不同应用使用不同的数据库索引以避免冲突
REDIS_DB=0

# ===================================
# 内容安全策略配置
# ===================================
# CSP_SOURCES: 内容安全策略允许的源
# 类型: 逗号分隔的字符串
# 用途: 指定页面可以加载资源的来源
# 示例: 'self',https://whosee.me,https://cdn.example.com
# 注意: 'self'表示同源
CSP_SOURCES='self'

# ===================================
# CORS 跨域资源共享配置
# ===================================
# CORS_ALLOWED_ORIGINS: 允许的跨域来源列表
# 类型: 逗号分隔的字符串
# 用途: 指定哪些域名可以访问API
# 示例: https://whosee.me,http://localhost:5173,http://localhost:5174
# 注意: 开发环境通常需要包含 localhost 地址
CORS_ALLOWED_ORIGINS=https://whosee.me,http://localhost:5173,http://localhost:5174,http://localhost:3000,https://whois-api.os.tn

# CORS_ALLOWED_METHODS: 允许的HTTP方法
# 类型: 逗号分隔的字符串
# 用途: 指定允许的HTTP请求方法
CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS

# CORS_ALLOWED_HEADERS: 允许的HTTP请求头
# 类型: 逗号分隔的字符串
# 用途: 指定允许的HTTP请求头
CORS_ALLOWED_HEADERS=Origin,Content-Type,Accept,Authorization,X-Requested-With

# CORS_EXPOSED_HEADERS: 暴露给客户端的响应头
# 类型: 逗号分隔的字符串
# 用途: 指定哪些响应头可以被客户端访问
CORS_EXPOSED_HEADERS=Content-Length,X-Cache

# CORS_MAX_AGE: 预检请求结果缓存时间(秒)
# 类型: 整数
# 用途: 设置浏览器缓存预检请求结果的时间
# 示例: 43200 (12小时)
CORS_MAX_AGE=43200

# ===================================
# 三方API配置
# ===================================
# WHOISFREAKS_API_KEY: WhoisFreaks API密钥
# 类型: 字符串
# 获取方式: 在WhoisFreaks网站(https://whoisfreaks.com/)注册并获取API密钥
# 用途: 用于查询WHOIS信息
WHOISFREAKS_API_KEY=your_whoisfreaks_api_key_here

# WHOISXML_API_KEY: WhoisXML API密钥
# 类型: 字符串
# 获取方式: 在WhoisXML网站(https://whoisxmlapi.com/)注册并获取API密钥
# 用途: 用于查询WHOIS信息
WHOISXML_API_KEY=your_whoisxml_api_key_here